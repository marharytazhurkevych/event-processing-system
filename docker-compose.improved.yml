version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: event-processing-postgres
    environment:
      POSTGRES_DB: event_processing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - event-network

  # NATS JetStream
  nats:
    image: nats:2.10-alpine
    container_name: event-processing-nats
    command: [
      "--jetstream",
      "--store_dir", "/data",
      "--max_file_store", "1GB",
      "--max_memory_store", "256MB"
    ]
    ports:
      - "4222:4222"
      - "8222:8222"  # HTTP monitoring
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - event-network

  # NATS Initializer
  nats-initializer:
    build:
      context: ./nats-initializer
      dockerfile: Dockerfile
    container_name: event-processing-nats-init
    depends_on:
      nats:
        condition: service_healthy
    environment:
      - NATS_URL=nats://nats:4222
    networks:
      - event-network
    restart: "no"

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: event-processing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - event-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: event-processing-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - event-network

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    container_name: event-processing-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/event_processing
      - NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      nats-initializer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - event-network

  # Facebook Collector
  fb-collector:
    build:
      context: .
      dockerfile: services/fb-collector/Dockerfile
    container_name: event-processing-fb-collector
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/event_processing
      - NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      nats-initializer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - event-network

  # TikTok Collector
  ttk-collector:
    build:
      context: .
      dockerfile: services/ttk-collector/Dockerfile
    container_name: event-processing-ttk-collector
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/event_processing
      - NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      nats-initializer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - event-network

  # Reporter Service
  reporter:
    build:
      context: .
      dockerfile: services/reporter/Dockerfile
    container_name: event-processing-reporter
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/event_processing
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - event-network

volumes:
  postgres_data:
  nats_data:
  prometheus_data:
  grafana_data:

networks:
  event-network:
    driver: bridge
